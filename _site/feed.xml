<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js lt-ie9 lt-ie8" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js lt-ie9" lang="en"><![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Zain Rizvi</title>

<meta name="keywords" content="">




<!-- Twitter Cards -->
<meta name="twitter:title" content="Zain Rizvi">




<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="http://localhost:4000/images/default-thumb.png">

<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="Zain Rizvi">

<meta property="og:url" content="http://localhost:4000/feed.xml">
<meta property="og:site_name" content="Zain Rizvi">

<meta property="og:image" content="http://localhost:4000/images/default-thumb.png">






<link rel="canonical" href="http://localhost:4000/feed.xml">
<link href="http://localhost:4000/feed.xml" type="application/atom+xml" rel="alternate" title="Zain Rizvi Feed">

<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- For all browsers -->
<link rel="stylesheet" href="http://localhost:4000/assets/css/main.css">

<meta http-equiv="cleartype" content="on">

<!-- HTML5 Shiv and Media Query Support -->
<!--[if lt IE 9]>
	<script src="http://localhost:4000/assets/js/vendor/html5shiv.min.js"></script>
	<script src="http://localhost:4000/assets/js/vendor/respond.min.js"></script>
<![endif]-->

<!-- Modernizr -->
<script src="http://localhost:4000/assets/js/vendor/modernizr-2.7.1.custom.min.js"></script>

<link href='//fonts.googleapis.com/css?family=PT+Sans+Narrow:400,700%7CPT+Serif:400,700,400italic' rel='stylesheet' type='text/css'>

<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="http://localhost:4000/favicon.ico">
<!-- 32x32 -->
<link rel="shortcut icon" href="http://localhost:4000/favicon.png">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="http://localhost:4000/images/apple-touch-icon-precomposed.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="http://localhost:4000/images/apple-touch-icon-72x72-precomposed.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="http://localhost:4000/images/apple-touch-icon-114x114-precomposed.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="http://localhost:4000/images/apple-touch-icon-144x144-precomposed.png">

</head>

<body class="page">

<!--[if lt IE 9]><div class="browser-upgrade alert alert-info">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</div><![endif]-->

<div class="navigation-wrapper">
	<div class="site-name">
		<a href="http://localhost:4000/">Zain Rizvi</a>
	</div><!-- /.site-name -->
	<div class="top-navigation">
		<nav id="site-nav" class="nav">
		    <ul>
		        
				    
				    <li><a href="http://localhost:4000/blog/" >Blog</a></li>
				
				    
				    <li><a href="http://localhost:4000/about/" >About</a></li>
				
		    </ul>
		</nav>
	</div><!-- /.top-navigation -->
</div><!-- /.navigation-wrapper -->




<div id="main" role="main">
  <div class="article-author-side">
    

<div itemscope itemtype="http://schema.org/Person">


	<img src="http://localhost:4000/images/bio-photo.png" class="bio-photo" alt="Zain Rizvi bio photo">


  <h3 itemprop="name">Zain Rizvi</h3>
  <p>Programmer, experimenter, life-long student. Working at Microsoft in the Azure Web Apps team</p>
  
  
  
  
  
  
  
  
  <a href="http://github.com/ZainRizvi" class="author-social" target="_blank"><i class="fa fa-fw fa-github"></i> Github</a>
  <a href="http://stackoverflow.com/users/21539/zain-rizvi" class="author-social" target="_blank"><i class="fa fa-fw fa-stack-overflow"></i> Stackoverflow</a>
  
  
  
  
  
  
  
  
  
  
</div>

    <hr />
    <!--<link href="//cdn-images.mailchimp.com/embedcode/classic-10_7.css" rel="stylesheet" type="text/css">-->
<style type="text/css">
    /* MailChimp Form Embed Code - Classic - 12/17/2015 v10.7 */
    #mc_embed_signup form {display:block; position:relative; text-align:left; padding:5px 0 5px 3%}
    #mc_embed_signup h2 {font-weight:bold; padding:0; margin:15px 0; font-size:1.4em;}
    #mc_embed_signup input {border: 1px solid #ABB0B2; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px;}
    #mc_embed_signup input[type=checkbox]{-webkit-appearance:checkbox;}
    #mc_embed_signup input[type=radio]{-webkit-appearance:radio;}
    #mc_embed_signup input:focus {border-color:#333;}
    #mc_embed_signup .small-meta {font-size: 11px;}
    #mc_embed_signup .nowrap {white-space:nowrap;}

    #mc_embed_signup .mc-field-group {clear:left; position:relative; width:96%; padding-bottom:3%; min-height:50px;}
    #mc_embed_signup .size1of2 {clear:none; float:left; display:inline-block; width:46%; margin-right:4%;}
    * html #mc_embed_signup .size1of2 {margin-right:2%; /* Fix for IE6 double margins. */}
    #mc_embed_signup .mc-field-group label {display:block; margin-bottom:3px;}
    #mc_embed_signup .mc-field-group input {display:block; width:100%; padding:8px 0; text-indent:2%;}
    #mc_embed_signup .mc-field-group select {display:inline-block; width:99%; padding:5px 0; margin-bottom:2px;}

    #mc_embed_signup .datefield, #mc_embed_signup .phonefield-us{padding:5px 0;}
    #mc_embed_signup .datefield input, #mc_embed_signup .phonefield-us input{display:inline; width:60px; margin:0 2px; letter-spacing:1px; text-align:center; padding:5px 0 2px 0;}
    #mc_embed_signup .phonefield-us .phonearea input, #mc_embed_signup .phonefield-us .phonedetail1 input{width:40px;}
    #mc_embed_signup .datefield .monthfield input, #mc_embed_signup .datefield .dayfield input{width:30px;}
    #mc_embed_signup .datefield label, #mc_embed_signup .phonefield-us label{display:none;}

    #mc_embed_signup .indicates-required {text-align:right; font-size:11px; margin-right:4%;}
    #mc_embed_signup .asterisk {color:#e85c41; font-size:150%; font-weight:normal; position:relative; top:5px;}     
    #mc_embed_signup .clear {clear:both;}

    #mc_embed_signup .mc-field-group.input-group ul {margin:0; padding:5px 0; list-style:none;}
    #mc_embed_signup .mc-field-group.input-group ul li {display:block; padding:3px 0; margin:0;}
    #mc_embed_signup .mc-field-group.input-group label {display:inline;}
    #mc_embed_signup .mc-field-group.input-group input {display:inline; width:auto; border:none;}

    #mc_embed_signup div#mce-responses {float:left; top:-1.4em; padding:0em .5em 0em .5em; overflow:hidden; width:90%; margin: 0 5%; clear: both;}
    #mc_embed_signup div.response {margin:1em 0; padding:1em .5em .5em 0; font-weight:bold; float:left; top:-1.5em; z-index:1; width:80%;}
    #mc_embed_signup #mce-error-response {display:none;}
    #mc_embed_signup #mce-success-response {color:#529214; display:none;}
    #mc_embed_signup label.error {display:block; float:none; width:auto; margin-left:1.05em; text-align:left; padding:.5em 0;}

    #mc-embedded-subscribe {clear:both; width:auto; display:block; margin:1em 0 1em 5%;}
    #mc_embed_signup #num-subscribers {font-size:1.1em;}
    #mc_embed_signup #num-subscribers span {padding:.5em; border:1px solid #ccc; margin-right:.5em; font-weight:bold;}

    #mc_embed_signup #mc-embedded-subscribe-form div.mce_inline_error {display:inline-block; margin:2px 0 1em 0; padding:5px 10px; background-color:rgba(255,255,255,0.85); -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; font-size:14px; font-weight:normal; z-index:1; color:#e85c41;}
    #mc_embed_signup #mc-embedded-subscribe-form input.mce_inline_error {border:2px solid #e85c41;}
    
    div.mc_embed_signup{
        background: #9ce8ff; 
        clear:left;
        font:14px Helvetica,Arial,sans-serif;
        padding: 0px 10px;
        border-style: solid;
        border-color: #29bbff;
        border-radius: 10px
    }
    /*#mc_embed_signup .button {
        background-color:#7DABD4;
    }
    #mc_embed_signup .button:hover {
        background-color:#777;
    }*/
    #mc_embed_signup .button {
        -moz-box-shadow:inset 0px -3px 7px 0px #29bbff;
        -webkit-box-shadow:inset 0px -3px 7px 0px #29bbff;
        box-shadow:inset 0px -3px 7px 0px #29bbff;
        background-color:#2dabf9;
        -moz-border-radius:3px;
        -webkit-border-radius:3px;
        border-radius:3px;
        border:1px solid #0b0e07;
        display:inline-block;
        cursor:pointer;
        color:#ffffff;
        font-family:Arial;
        font-size:15px;
        padding:9px 23px;
        text-decoration:none;
        text-shadow:0px 1px 0px #263666;
    }
    #mc_embed_signup .button:hover {
        background-color:#0688fa;
    }
    #mc_embed_signup .button:active {
        position:relative;
        top:1px;
    }


    /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
    We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>
<!-- Begin MailChimp Signup Form -->
<div class="mc_embed_signup" id="mc_embed_signup">
<form action="//zainrizvi.us11.list-manage.com/subscribe/post?u=dbda45480a7b2dbd7af5b784e&amp;id=3978b7c9c7" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div id="mc_embed_signup_scroll">
    <h2>
    Like what you're reading? Sign up here and get new posts delivered to your inbox
    </h2>
<div class="mc-field-group">
    <label for="mce-FNAME">First Name </label>
    <input type="text" value="" name="FNAME" class="" id="mce-FNAME">
</div>
<div class="mc-field-group">
    <label for="mce-LNAME">Last Name </label>
    <input type="text" value="" name="LNAME" class="" id="mce-LNAME">
</div>
<div class="mc-field-group">
    <label for="mce-EMAIL">Email Address </label>
    <input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL">
</div>
    <div id="mce-responses" class="clear">
        <div class="response" id="mce-error-response" style="display:none"></div>
        <div class="response" id="mce-success-response" style="display:none"></div>
    </div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_dbda45480a7b2dbd7af5b784e_3978b7c9c7" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Count me in!" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
    </div>
</form>
</div>
<script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[0]='EMAIL';ftypes[0]='email';}(jQuery));var $mcj = jQuery.noConflict(true);</script>
<!--End mc_embed_signup-->
  </div>
  <article class="page">
    <h1></h1>
    <div class="article-wrap">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Zain Rizvi</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2017-07-13T01:00:14-07:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Zain Rizvi</name>
  <uri>http://localhost:4000/</uri>
  
</author>


<entry>
  <title type="html"><![CDATA[How to Redirect the default *.azurewebsites.net domain to your custom domain on Azure Web Apps]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2016/04/07/block-default-azure-websites-domain/" />
  <id>http://localhost:4000/2016/04/07/block-default-azure-websites-domain</id>
  <published>2016-04-07T00:00:00-07:00</published>
  <updated>2016-04-07T00:00:00-07:00</updated>
  <author>
    <name>Zain Rizvi</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;When you create a new website using &lt;a href=&quot;https://azure.microsoft.com/en-us/services/app-service/web/&quot;&gt;Azure Web Apps&lt;/a&gt; you get a default &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sitename&amp;gt;.azurewebsites.net&lt;/code&gt; domain assigned to your site.  That’s great, but what if you add a custom host name to your site and don’t want people to be able to access your default *.azurewebsites.net domain anymore? (You paid good money for that custom domain.)  This post explains how to redirect all traffic aimed at your site’s default domain to your custom domain instead.&lt;/p&gt;

&lt;p&gt;It’s really simple. You just need to add a redirect rule to your site’s web.config file.  You can do that by adding the following rewrite rule to the web.config file in your wwwroot folder.  If you don’t have a web.config file, then you can create one and just paste the text below into it, just change the host names to match your site’s host names:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;  
    &amp;lt;rewrite&amp;gt;  
        &amp;lt;rules&amp;gt;  
          &amp;lt;rule name=&quot;Redirect rquests to default azure websites domain&quot; stopProcessing=&quot;true&quot;&amp;gt;
            &amp;lt;match url=&quot;(.*)&quot; /&amp;gt;  
            &amp;lt;conditions logicalGrouping=&quot;MatchAny&quot;&amp;gt;
              &amp;lt;add input=&quot;{HTTP_HOST}&quot; pattern=&quot;^yoursite\.azurewebsites\.net$&quot; /&amp;gt;
            &amp;lt;/conditions&amp;gt;
            &amp;lt;action type=&quot;Redirect&quot; url=&quot;http://www.yoursite.com/{R:0}&quot; /&amp;gt;  
          &amp;lt;/rule&amp;gt;  
        &amp;lt;/rules&amp;gt;  
    &amp;lt;/rewrite&amp;gt;  
  &amp;lt;/system.webServer&amp;gt;  
&amp;lt;/configuration&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Basically we’re telling IIS to take any request where the host name matches the RegEx pattern “^yoursite.azurewebsites.net$” and return an HTTP 301 response. The response will include the originally requested url, except it’ll be pointing to your custom “www.yoursite.com” domain instead.  When the user’s browser reads that 301 response and the new url, it will automatically load that new url instead. It’ll even change the address the user sees in the address bar.&lt;/p&gt;

&lt;p&gt;That’s great, so how do we parse the above code exactly?  I’m not a fan of copying code unless I know exactly what it’s doing.&lt;/p&gt;

&lt;p&gt;So let’s see what’s going on here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;  
  ...
  &amp;lt;/system.webServer&amp;gt;  
&amp;lt;/configuration&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This part tells IIS that we’re modifying the web server’s configuration settings. The next section is where it starts to get tricky:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;rewrite&amp;gt;  
    &amp;lt;rules&amp;gt; 
    ... 
    &amp;lt;/rules&amp;gt;  
&amp;lt;/rewrite&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;rewrite&amp;gt;&lt;/code&gt; tag tells IIS that the elements it encloses are settings for the the &lt;a href=&quot;http://www.iis.net/learn/extensions/url-rewrite-module/creating-rewrite-rules-for-the-url-rewrite-module&quot;&gt;URL Rewrite&lt;/a&gt; module.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;rules&amp;gt;&lt;/code&gt; tag lists all the rules that we want that module to follow.   In our case, we want it to follow a rule that will return a HTTP 301 redirect response to the client (the user’s web browser).&lt;/p&gt;

&lt;p&gt;Now for the actual rule:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;rule name=&quot;Redirect rquests to default azure websites domain&quot; stopProcessing=&quot;true&quot;&amp;gt;
  &amp;lt;match url=&quot;(.*)&quot; /&amp;gt;  
  &amp;lt;conditions logicalGrouping=&quot;MatchAny&quot;&amp;gt;
    &amp;lt;add input=&quot;{HTTP_HOST}&quot; pattern=&quot;^yoursite\.azurewebsites\.net$&quot; /&amp;gt;
  &amp;lt;/conditions&amp;gt;
  &amp;lt;action type=&quot;Redirect&quot; url=&quot;http://www.yoursite.com/{R:0}&quot; /&amp;gt;  
&amp;lt;/rule&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The “name” attribute is just for human readability. It doesn’t affect execution at all. StopProcessing=”true” tells the rewrite module that if this rule applies to the incomming request, then not to bother processing any other rules  after this one becuase they won’t matter.  In our case we only have one rule, so this tag doesn’t do anything, but it can save you some CPU if you have more rules defined.&lt;/p&gt;

&lt;p&gt;Next is the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;match url=&quot;(.*)&quot; /&amp;gt;&lt;/code&gt; section. That’s a regEx pattern inside, and since this regEx covers all possible inputs, it tells IIS to apply this rule to all requests, no matter what their url is.&lt;/p&gt;

&lt;p&gt;Then comes the conditions section. We set &lt;code class=&quot;highlighter-rouge&quot;&gt;logicalGrouping=&quot;MatchAny&quot;&lt;/code&gt; to tell IIS to execute the rule if any of the following conditions hold true.  Right now we only have one condition, so again it doesn’t matter, but if you had multiple conditions (for example, multiple domain names you wanted to forward to your custom domain name) then you could list them all here. Alternatively, you could set it to “MatchAll” to tell IIS to only run the action if it matches all the conditons given.&lt;/p&gt;

&lt;p&gt;Here’s the condition we used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;add input=&quot;{HTTP_HOST}&quot; pattern=&quot;^yoursite\.azurewebsites\.net$&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It says to look at the http host and evaluate the condition as true if the host matches the given regEx pattern, which we set to your default azure domain name.&lt;/p&gt;

&lt;p&gt;The last bit is the action, the meat of the whole rule:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;action type=&quot;Redirect&quot; url=&quot;http://www.yoursite.com/{R:0}&quot; /&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we’re telling the Rewrite module what action to take (what it’s actually supposed to do) when a request matches the above rules.  The action we want is “Redirect”, which is where it’ll return the HTTP 301 to the client, and when it returns a 301 we need to tell the client what url it should be redirected to. That’s how we get to specify our desired domain name.&lt;/p&gt;

&lt;p&gt;But we don’t want to send the user to the root of the domain name, so we add in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/{R:0}&lt;/code&gt; bit, which (put simply) says “Look at the orignal url we matched against in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;match&amp;gt;&lt;/code&gt; tag, and stick that in.”  A more thorough description is that we ran a regex expression in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;match&amp;gt;&lt;/code&gt; tag, and this &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;R:0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; returns the first RegEx group.&lt;/p&gt;

&lt;p&gt;And there you have it, that’s how you can redirect all request for your default azure domain to your custom domain.&lt;/p&gt;

&lt;p&gt;As a final example, here’s web.config file’s conent for my site:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;  
    &amp;lt;rewrite&amp;gt;  
        &amp;lt;rules&amp;gt;  
          &amp;lt;rule name=&quot;Redirect rquests to default azure websites domain&quot; stopProcessing=&quot;true&quot;&amp;gt;
            &amp;lt;match url=&quot;(.*)&quot; /&amp;gt;  
            &amp;lt;conditions logicalGrouping=&quot;MatchAny&quot;&amp;gt;
              &amp;lt;add input=&quot;{HTTP_HOST}&quot; pattern=&quot;^zainrizvi\.azurewebsites\.net$&quot; /&amp;gt;
            &amp;lt;/conditions&amp;gt;
            &amp;lt;action type=&quot;Redirect&quot; url=&quot;http://www.zainrizvi.io/{R:0}&quot; /&amp;gt;  
          &amp;lt;/rule&amp;gt;  
        &amp;lt;/rules&amp;gt;  
    &amp;lt;/rewrite&amp;gt;  
  &amp;lt;/system.webServer&amp;gt;  
&amp;lt;/configuration&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2016/04/07/block-default-azure-websites-domain/&quot;&gt;How to Redirect the default *.azurewebsites.net domain to your custom domain on Azure Web Apps&lt;/a&gt; was originally published by Zain Rizvi at &lt;a href=&quot;http://localhost:4000&quot;&gt;Zain Rizvi&lt;/a&gt; on April 07, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Let customers use Facebook authentication to log into your ASP.NET Core site]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2016/03/24/create-site-with-facebook-login-using-asp.net-core/" />
  <id>http://localhost:4000/2016/03/24/create-site-with-facebook-login-using-asp.net-core</id>
  <published>2016-03-24T00:00:00-07:00</published>
  <updated>2016-03-24T00:00:00-07:00</updated>
  <author>
    <name>Zain Rizvi</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;The goal of this post is to setup Facebook authentication in a way that we get access to the person’s basic information and their email address when they log in.&lt;/p&gt;

&lt;p&gt;Setting up auth from an external service is hard.  At least it is if the steps aren’t really documented.  I’m sharing the steps I followed to get Facebook auth working for a brand new ASP.NET Core site.&lt;/p&gt;

&lt;p&gt;These instructions assume you’ve got Visual Studio 2015 RC1 installed. I expect these steps should keep working after VS RTMs as well.&lt;/p&gt;

&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Overview&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting-up-the-database&quot; id=&quot;markdown-toc-setting-up-the-database&quot;&gt;Setting up the database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-access-to-the-users-email&quot; id=&quot;markdown-toc-getting-access-to-the-users-email&quot;&gt;Getting access to the User’s Email&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#actually-reading-the-email-address&quot; id=&quot;markdown-toc-actually-reading-the-email-address&quot;&gt;Actually reading the email address&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#getting-the-email-address-from-facebook&quot; id=&quot;markdown-toc-getting-the-email-address-from-facebook&quot;&gt;Getting the email address from Facebook&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-the-user-name-from-facebook-and-getting-rid-of-the-extra-registration-page&quot; id=&quot;markdown-toc-getting-the-user-name-from-facebook-and-getting-rid-of-the-extra-registration-page&quot;&gt;Getting the User Name from Facebook and getting rid of the extra Registration page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#poking-around-the-database&quot; id=&quot;markdown-toc-poking-around-the-database&quot;&gt;Poking around the database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-end&quot; id=&quot;markdown-toc-the-end&quot;&gt;The End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html&quot;&gt;official docs&lt;/a&gt; contain good instructions, but they’re not quite complete.  Let’s start off by following them and then we’ll move forward from there:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html#use-secretmanager-to-store-facebook-appid-and-appsecret&quot;&gt;Create a new ASP.NET project&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html#running-the-application&quot;&gt;Run the app to make sure it works&lt;/a&gt;. In the site, click the “Log in” button on the top left corner to see the login screen.  You’ll note that it lets you create a new account.  It saves this account in a local Sql database that was installed on your computer with Visual Studio (we’ll talk more about this later). On the right hand side you’ll see instructions for setting up logins using an external service like Facebook.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/2016/03/Login-Screen.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html#creating-the-app-in-facebook&quot;&gt;Get Facebook developer credentials by creating an app in Facebook&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html#use-secretmanager-to-store-facebook-appid-and-appsecret&quot;&gt;Use SecretManager to store the Facebook AppId and AppSecret&lt;/a&gt;. The SecretManager is a pretty cool tool since it gives you a good place to put your secrets without risking them accidentally ending up checked into your source control and ending up on Github&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html#enable-facebook-middleware&quot;&gt;Enable the Facebook middleware&lt;/a&gt;. This tells ASP.NET Core that you want to use Facebook authentication and will set you up with the basics that  you’ll need.  Visual Studio will prompt you to add a reference to Microsoft.AspNet.Authentication.Facebook when you add the Facebook middleware code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Herea are the two changes you’ll have made to your project:  &lt;a href=&quot;https://github.com/ZainRizvi/ASP.NET-Core-FacebookAuth/commit/c2472e966c0d24262280691b53ae039ba341eb51&quot;&gt;adding the Facebook middleware&lt;/a&gt; and &lt;a href=&quot;https://github.com/ZainRizvi/ASP.NET-Core-FacebookAuth/commit/64d0f89e6644561b154e869c59b19da4f9072534&quot;&gt;adding the reference&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;setting-up-the-database&quot;&gt;Setting up the database&lt;/h1&gt;

&lt;p&gt;If you run your site and try to login with your Facebook account you may notice the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Database-failure.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s because we never setup the database!  What, you don’t remember creating a database? That’s because it was done for you automatically when you created the project, or at least part of it was.&lt;/p&gt;

&lt;p&gt;When you installed Visual Studio 2015, you also got a copy of sqllocaldb installed on your computer. That lets your computer act as a local Sql Server instance and you can create and access databases on it.  If you look in your site’s appsettings.json file you’ll see something similar to the following setting that sets your connection string:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Data&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;DefaultConnection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ConnectionString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Server=(localdb)\\mssqllocaldb;Database=aspnet5-FacebookAuthSite-1746853f-78c4-4424-8598-a8e8d950b167;Trusted_Connection=True;MultipleActiveResultSets=true&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s says where your database is.  This is great for testing, but once you’re ready to host your site in the cloud you’ll want to change that connection string to point to a database on Azure SQL Server or some other cloud server. You don’t need to worry abou this right now, but when you’re ready to change the connection string you can use the &lt;a href=&quot;http://docs.asp.net/en/latest/security/authentication/sociallogins.html#use-secretmanager-to-store-facebook-appid-and-appsecret&quot;&gt;SecretManager&lt;/a&gt; on your local computer to hold the connection string for the local sql db, while use a different type of configuration (like an App Setting if you’re hosting your site on Azure Web Apps) to store your production database’s connection string.&lt;/p&gt;

&lt;p&gt;We need to create the all the user tables for our site (we never created them, hence the error message that we saw). Normally we’d do this using Entity Framework migrations on the command line (via commands ‘dnx ef migrations add {migrationName}’ and ‘dnx ef migrations update’), but luckily for us our site shows a handy “Apply Migrations” button that’ll just do that for us.  Just click that button and your database will be setup. And then hit refresh to see the working web page.&lt;/p&gt;

&lt;h1 id=&quot;getting-access-to-the-users-email&quot;&gt;Getting access to the User’s Email&lt;/h1&gt;

&lt;p&gt;Now if you go back to the login screen and try to create a site using Facebook authentication, you’ll be redirected to a page that prompts you to add an email address to complete your registration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Register-user.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s a bit inconvenient for the user, ideally we’d just ask Facebook to give us the user’s email address. So let’s do that.&lt;/p&gt;

&lt;p&gt;The way we do that is by asking the user for permission to access their personal information when we register them.  This is done by specifying &lt;a href=&quot;https://developers.facebook.com/docs/facebook-login/permissions&quot;&gt;Facebook Permissions&lt;/a&gt; in our authentication code. Each kind of permission lets us pull different user information from Facebook.  We really just want ‘email’, but let’s also get ‘public_profile’ just for the heck of it (I think we get ‘public_profile’ by default anyways).&lt;/p&gt;

&lt;p&gt;We add these permissions by to the options we send in to the UseFacebookAuthentication middleware.  In Startup.cs, in the Configure method, change the call to UseFacebookAuthentication to:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseFacebookAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authentication:Facebook:AppId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppSecret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authentication:Facebook:AppSecret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;public_profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now when the user tries to register using Facebook auth they’ll see something like this if they click the ‘Edit the info you provide’ button on Facebook.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Facebook-info.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When they click Ok you’ll have access to read their email address!&lt;/p&gt;

&lt;h2 id=&quot;actually-reading-the-email-address&quot;&gt;Actually reading the email address&lt;/h2&gt;

&lt;p&gt;Great, we can access the email address, but when we try to register we still get back to the same page as before with a blank email:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Register-user.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What gives?  Let’s take a look at the code. The route we’re hitting is “Account/ExternalLoginCallback”, so let’s look at the Account controller class, ExternalLoginCallback method. Near the bottom of that method is the code&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExternalPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindFirstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClaimTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we’re expecting the email address claim (&lt;a href=&quot;http://dotnetcodr.com/2013/02/11/introduction-to-claims-based-security-in-net4-5-with-c-part-1/&quot;&gt;claims&lt;/a&gt; are how we identify information about users who are trying to log in) but we’re not getting it. If you inspect that code in the debugger you can verify that there is no email claim.&lt;/p&gt;

&lt;h2 id=&quot;getting-the-email-address-from-facebook&quot;&gt;Getting the email address from Facebook&lt;/h2&gt;

&lt;p&gt;Turns out Facebook doesn’t send that to us when the user logs in. I don’t know why. But we can explicitly ask Facebook for this information.  To do that we need to make an http request to &lt;a href=&quot;https://developers.facebook.com/docs/graph-api&quot;&gt;Facebook’s Graph Api&lt;/a&gt;. The Graph Api lets us access all the information about the user that we had earlier requested access to.&lt;/p&gt;

&lt;p&gt;The Graph Api is a REST Api, but in order to avoid the complexities of using it I’ll just use the Facebook nuget package. Unfortunately this package does not work on the dnxcore environment, meaning we can only run it on Windows based servers, but you can create your own Facebook Graph Api client if you want to run your site using dnxcore.&lt;/p&gt;

&lt;p&gt;Let’s install the Facebook nuget package by modifying the frameworks element in your project.json file to like like the following:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frameworks&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dnx451&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Facebook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7.0.6&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We had to remove the dnxcore framework since we will no longer support it, and we’re marking the Facebook package explicitly as a dnx451 only package.&lt;/p&gt;

&lt;p&gt;Now to actually use the Graph Api lets go back to the Startup.cs class -&amp;gt; Configure method -&amp;gt; UseFacebookAuthentication middleware.  We want to configure the options to say that whenever a user logs in, call the Facebook Graph Api and get the user’s email address, and add that as the email claim.  You’ll use the following code to do that (intellisense will prompt you to add some dependency references and using statements as well):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseFacebookAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authentication:Facebook:AppId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppSecret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authentication:Facebook:AppSecret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;public_profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Events&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuthEvents&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OnCreatingTicket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Use the Facebook Graph Api to get the user's email address
&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// and add it to the email claim
&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FacebookClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name,id,email&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClaimTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(Fyi, the team managing the Facebook package has vanished into the netherwebs, but you can find a [cached copy of their documentation here] (http://web.archive.org/web/20150317045522/http://facebooksdk.net/docs/web/getting-started/))&lt;/p&gt;

&lt;p&gt;Now if we redeploy our site and try to register using Facebook we’ll see the following page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Register-user-with-email.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have the email!&lt;/p&gt;

&lt;p&gt;Note, this message is a bit wasteful since we’ll be asking Facebook to give us the user’s email address on &lt;em&gt;every&lt;/em&gt; authenticated request that they make, when we really only want to do this when they first register.  I’ll leave it as an exercise for the user to optimize this code flow.&lt;/p&gt;

&lt;p&gt;The code you have now should match what’s in &lt;a href=&quot;https://github.com/ZainRizvi/ASP.NET-Core-FacebookAuth/commit/f771c75cc89691504a04e9b5b985428998002f8e&quot;&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;getting-the-user-name-from-facebook-and-getting-rid-of-the-extra-registration-page&quot;&gt;Getting the User Name from Facebook and getting rid of the extra Registration page&lt;/h1&gt;

&lt;p&gt;Great, we’re now reading the email address.  And we know the user’s name. So what do we need this extra registration page for?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Register-user-with-email.png&quot; alt=&quot;Login window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We should really just register the user automatically.&lt;/p&gt;

&lt;p&gt;Digging around in the code, we see that in the AuthenticationController class, the ExternalLoginCallback method creates an ExternalLoginConfirmationViewModel view model with the user’s email and then calls the ExternalLoginConfirmation view to let the user add in the custom details, which, when the user hits “Register” will send a POST request to the ExternalLoginConfirmation method with all the required data. We can skip the middle step of involving the user and just send the required data to the  ExternalLoginConfirmation method ourselves.&lt;/p&gt;

&lt;p&gt;In fact, if you look at the ExternalLoginConfirmation method, they set the user’s email as the user name as well. Let’s fix that too while we’re at it.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationUser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first step will be to extend our ExternalLoginConfirmationViewModel to add a UserName property.  Edit ViewModels\ExternalLoginConfirmationViewModel.cs to look like the following:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExternalLoginConfirmationViewModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, in our AccountController’s ExternalLoginCallback method, change the last else statement (where it calls the ExternalLoginConfirmation View) to match the below code. We’re specifying the UserName using the Name claim and passing that directly to the ExternalLoginConfirmation method instead of invoking a View.  The ExternalLoginConfirmation will generate and return the regisration completed view directly.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If the user does not have an account, then ask the user to create an account.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ReturnUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LoginProvider&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExternalPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindFirstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClaimTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExternalPrincipal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FindFirstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClaimTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExternalLoginConfirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExternalLoginConfirmationViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We also need to modify the ExternalLoginConfirmation to actually read the UserName from the model:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExternalLoginConfirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExternalLoginConfirmationViewModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Get the information about the user from the external login provider
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_signInManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetExternalLoginInfoAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ExternalLoginFailure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationUser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_userManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally we need to modify the last line of ExternalLoginConfirmation, where it returns the view, to explicitly mention the name of the view:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ExternalLoginConfirmation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Without that line, when ExternalLoginCallback calls ExternalLoginConfirmation, the View method would look for a view named ExternalLoginCallback, which doesn’t exist.&lt;/p&gt;

&lt;p&gt;Now let’s try to run our site and log in.  And you might now see an error like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Invalid-user-name.png&quot; alt=&quot;Invalid user name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The message says that the name can only have numbers and letters, but my name contains a space so it’s complaining. It’s gonna be tough getting names from Facebook if we don’t allow spaces in the name, so let’s fix that.&lt;/p&gt;

&lt;p&gt;This setting resides back in Startup.cs, but this time we’ll go to the ConfigureServices method, which is where all the dependency injection gets setup.  We’ll modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;services.AddIdentity()&lt;/code&gt; method to pass in the below options:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IdentityRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllowedUserNameCharacters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._' &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddEntityFrameworkStores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationDbContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddDefaultTokenProviders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This expands our list of allwed characters in the user name to include a space, and I also threw in a few extra characters for good measure.  It’s not perfect, but it’ll at least protect us from some of the &lt;a href=&quot;http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&quot;&gt;falsehoods developers believe about names&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Try running your site again and registering as a new user using Facebook authentication and…hey we’re in!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Logged-in.png&quot; alt=&quot;We're logged in&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fyi, &lt;a href=&quot;https://github.com/ZainRizvi/ASP.NET-Core-FacebookAuth/commit/0691694a15f38c7fb034feff0749724c9c60e25e&quot;&gt;this commit&lt;/a&gt; contains all the changes you should have made.&lt;/p&gt;

&lt;h1 id=&quot;poking-around-the-database&quot;&gt;Poking around the database&lt;/h1&gt;

&lt;p&gt;We’ve registered a user, but where is the data actually stored? Lets take a quick look around the database and check it out.&lt;/p&gt;

&lt;p&gt;In Visual Studio, go to View-&amp;gt;SQL Server Object Explorer to start browsing the database.  There if you poke around the folders you’ll find a database corresponding to your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Local-Sql-Server.png&quot; alt=&quot;Browsing SQL Server Object Explorer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can expand the database to see all the tables in there. Right now you’ll only see tables created for managing users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Sql-Server-Tables.png&quot; alt=&quot;Browsing SQL Server Tables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right click the dbo.AspNetUsers table and click “View data”, and you’ll see a table open up containing the Facebook user you just registered!&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;The End&lt;/h1&gt;

&lt;p&gt;That’s it for this post. Hope you guys were able to follow all the steps.  Shout out in the comments if you found this stuff helpful or if you run into any problems.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2016/03/24/create-site-with-facebook-login-using-asp.net-core/&quot;&gt;Let customers use Facebook authentication to log into your ASP.NET Core site&lt;/a&gt; was originally published by Zain Rizvi at &lt;a href=&quot;http://localhost:4000&quot;&gt;Zain Rizvi&lt;/a&gt; on March 24, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Deploy statically generated sites to Azure Web Apps]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/10/13/deploy-statically-generated-sites-to-azure-web-apps/" />
  <id>http://localhost:4000/2015/10/13/deploy-statically-generated-sites-to-azure-web-apps</id>
  <published>2015-10-13T00:00:00-07:00</published>
  <updated>2015-10-13T00:00:00-07:00</updated>
  <author>
    <name>Zain Rizvi</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;There are a lot of awesome static site generators out there.  It’s not always easy to figure out how to setup continuous deployment for them though.&lt;/p&gt;

&lt;p&gt;This post will describe how to deploy a statically generated site using yeoman angular to Azure Web Apps, but these steps can be applied to deploy any statically generated site to Azure Web Apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;deploying-the-initial-site&quot;&gt;Deploying the initial site&lt;/h4&gt;
&lt;p&gt;I tried using yeoman’s gulp-angular generator.  I made a quick site following their &lt;a href=&quot;http://yeoman.io/codelab/index.html&quot;&gt;tutorial&lt;/a&gt;, setup &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/&quot;&gt;continuous deployment via github&lt;/a&gt;, navigated to the newly deployed site and I saw…huh?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/10/01-No-permission-to-site.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What’s going on here?&lt;/p&gt;

&lt;h4 id=&quot;using-kudu-for-debugging&quot;&gt;Using Kudu for debugging&lt;/h4&gt;
&lt;p&gt;Luckily all Azure Web Apps come with a handy &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki&quot;&gt;Kudu site&lt;/a&gt; that gives you command line access to your site. You can get to it at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&amp;lt;yourSiteName&amp;gt;.scm.azurewebsites.net\DebugConsole&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/10/02-Kudu-console.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I navigated to the site’s &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot&lt;/code&gt; folder and saw all the content was there.  And that’s when I face-palmed and realized &lt;em&gt;that statically generated site is saved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder, and that’s not even part of the deployment!!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luckily, that’s easy enough to fix.&lt;/p&gt;

&lt;h4 id=&quot;check-the-static-site-into-the-source-code&quot;&gt;Check the static site into the source code&lt;/h4&gt;
&lt;p&gt;First issue was to include the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder in the source code. You just need to exclude the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dist&lt;/code&gt; line from the .gitignore file for that. &lt;a href=&quot;https://github.com/ZainRizvi/YoAngularOnAzureWebApps/commit/3fc3040eb65699295e85c151f339dc30aae6c971#diff-a084b794bc0759e7a6b77810e01874f2&quot;&gt;Easy enough&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now when you deploy your site to Azure Web Apps your site exists in the new &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\dist&lt;/code&gt; folder!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/10/03-Dist-folder-appears.png&quot; alt=&quot;alt&quot; /&gt;
(Fyi, with &lt;code class=&quot;highlighter-rouge&quot;&gt;yo angular&lt;/code&gt; you have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;grunt&lt;/code&gt; once first before you check in your code to actually generate the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder).&lt;/p&gt;

&lt;p&gt;But your site still doesn’t work…because Azure Web Apps is expecting the site’s content to be in &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Darn.&lt;/p&gt;

&lt;h4 id=&quot;custom-deployment-settings-to-the-rescue&quot;&gt;Custom deployment settings to the rescue!&lt;/h4&gt;

&lt;p&gt;Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;.deployment&lt;/code&gt; &lt;a href=&quot;https://github.com/ZainRizvi/YoAngularOnAzureWebApps/commit/9be9a4b503a86678d85e3a4287fa26cce1f175b7&quot;&gt;file&lt;/a&gt; to the root folder of your code and paste the below inside:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[config]
project = dist
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will tell Azure Web Sits that the root folder for your site is the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder. Now your sites will be hosted from the &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\dist&lt;/code&gt; folder. If your static site generator puts your site in some other folder, set project to that folder’s name.&lt;/p&gt;

&lt;p&gt;Check in the file, deploy it to Azure Web Apps, and see the magic happen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/10/04-Working-site.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find a full copy of the sample code here on Github, with check-ins corresponding to each step of this tutorial: https://github.com/ZainRizvi/YoAngularOnAzureWebApps&lt;/p&gt;

&lt;p&gt;You can see the final working site here: http://yoangularonazurewebapps.azurewebsites.net&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/10/13/deploy-statically-generated-sites-to-azure-web-apps/&quot;&gt;Deploy statically generated sites to Azure Web Apps&lt;/a&gt; was originally published by Zain Rizvi at &lt;a href=&quot;http://localhost:4000&quot;&gt;Zain Rizvi&lt;/a&gt; on October 13, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Backup just the Important Parts of your Site with Azure Web Apps]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2015/06/05/creating-partial-backups-of-your-site-with-azure-web-apps/" />
  <id>http://localhost:4000/2015/06/05/creating-partial-backups-of-your-site-with-azure-web-apps</id>
  <published>2015-06-05T00:00:00-07:00</published>
  <updated>2015-06-05T00:00:00-07:00</updated>
  <author>
    <name>Zain Rizvi</name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Introducting a way to backup just the parts of your website that matter most.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Azure Web Apps provides powerful &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-backup/&quot;&gt;backup/restore functionality&lt;/a&gt;. (Because disasters can &lt;a href=&quot;http://blog.codinghorror.com/international-backup-awareness-day/&quot;&gt;happen to anyone&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;However, sometimes you don’t want to backup everything on your site, especially if you backup your site regularly, or if your site has over 10GB of content (that’s the max amount you can backup at a time).&lt;/p&gt;

&lt;p&gt;For example, you probably don’t want to back up the log files. Or if you &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-backup/#configure-automated-backups&quot;&gt;setup weekly backups&lt;/a&gt; you won’t want to fill up your storage account with static content that never changes like old blog posts or images.&lt;/p&gt;

&lt;p&gt;Partial backups will let you choose exactly which files you want to back up.&lt;/p&gt;

&lt;h1 id=&quot;specify-the-files-you-dont-want-to-backup&quot;&gt;Specify the files you don’t want to backup&lt;/h1&gt;

&lt;p&gt;You can create a list of files and folders to exclude from the backup.&lt;/p&gt;

&lt;p&gt;You save the list as a text file called _backup.filter in the wwwroot folder of your site. An easy way to access this is through the &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Kudu-console&quot;&gt;Kudu Console&lt;/a&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;http://{yoursite}.scm.azurewebsites.net/DebugConsole&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The instructions below will be using the Kudu Console to create the _backup.filter file, but you can use your favorite deployment method to put the file there.&lt;/p&gt;

&lt;h2 id=&quot;what-to-do&quot;&gt;What to do&lt;/h2&gt;

&lt;p&gt;I’ve got a site that contains log files and static images from past years that are never going to change.&lt;/p&gt;

&lt;p&gt;I already have a full backup of the site which includes the old images. Now I want to backup the site every day, but I don’t want to pay for storing log files or the static image files that never change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/06/Logs-1.PNG&quot; alt=&quot;Log files directory&quot; /&gt; &lt;img src=&quot;/images/2015/06/Images-2.PNG&quot; alt=&quot;Images directory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The below steps show how I’d exclude those files from the backup.&lt;/p&gt;

&lt;h3 id=&quot;identify-the-files-and-folders-you-dont-want-to-backup&quot;&gt;Identify the files and folders you don’t want to backup&lt;/h3&gt;

&lt;p&gt;This is easy. I already know I don’t want to backup any log files, so I want to exclude &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\Logs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s another log file folder that all Azure Web Apps have at &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\LogFiles&lt;/code&gt;. Let’s exclude that too.&lt;/p&gt;

&lt;p&gt;I also don’t want to backup the images from previous years over and over again. So lets add &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\Images\2013&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\Images\2014&lt;/code&gt; to the list as well.&lt;/p&gt;

&lt;p&gt;Finally, let’s not backup the brand.png file in the Images folder either, just to show we can blacklist individual files as well. It’s located at &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\Images\brand.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us the following folders that we don’t want to backup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;D:\home\site\wwwroot\Logs&lt;/li&gt;
  &lt;li&gt;D:\home\LogFiles&lt;/li&gt;
  &lt;li&gt;D:\home\site\wwwroot\Images\2013&lt;/li&gt;
  &lt;li&gt;D:\home\site\wwwroot\Images\2014&lt;/li&gt;
  &lt;li&gt;D:\home\site\wwwroot\Images\brand.png&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-the-exclusion-list&quot;&gt;Create the exclusion list&lt;/h3&gt;

&lt;p&gt;You save the blacklist of files and folders that you don’t want to backup in  a special file called _backup.filter.  Create the file and place it at &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\_backup.filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;List all the files and folders you don’t want to backup in the _backup.filter file. You add the full path relative to D:\home of the folder or file that you want to exclude from the backup, one path per line.&lt;/p&gt;

&lt;p&gt;So for my site, &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\Logs&lt;/code&gt; becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;\site\wwwroot\Logs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\LogFiles&lt;/code&gt; becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;\LogFiles&lt;/code&gt;, so on and so forth, resulting in the following contents for my _backup.filter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\site\wwwroot\Logs
\LogFiles
\site\wwwroot\Images\2013
\site\wwwroot\Images\2014
\site\wwwroot\Images\brand.png
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note the starting &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; at the beginning of each line. That’s important.&lt;/p&gt;

&lt;h1 id=&quot;run-a-backup&quot;&gt;Run a backup&lt;/h1&gt;

&lt;p&gt;Now you can run backups the same way you would normally do it. &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-backup/#create-a-manual-backup&quot;&gt;Manually&lt;/a&gt;, &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-backup/#configure-automated-backups&quot;&gt;automatically&lt;/a&gt;, either way is fine.&lt;/p&gt;

&lt;p&gt;Any files and folders that fall under the filters listed in the _backup.filter will be excluded from the backup. This means now the log files and the 2013 and 2014 image files will no longer be backed up.&lt;/p&gt;

&lt;h1 id=&quot;restoring-your-backed-up-site&quot;&gt;Restoring your backed up site&lt;/h1&gt;

&lt;p&gt;You restore partial backups of your site the same way you would &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-restore/&quot;&gt;restore a regular backup&lt;/a&gt;. It’ll do the right thing.&lt;/p&gt;

&lt;h4 id=&quot;the-technical-details&quot;&gt;The technical details&lt;/h4&gt;

&lt;p&gt;With full (non-partial) backups normally all content on the site is replaced with whatever is in the backup.  If a file is on the site but not in the backup it gets deleted.&lt;/p&gt;

&lt;p&gt;But when restoring partial backups though any content that is located in one of the blacklisted folders (like &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\home\site\wwwroot\images\2014&lt;/code&gt; for my site) will be left as is. And if individual files were black listed then they’ll also be left alone during the restore.&lt;/p&gt;

&lt;h1 id=&quot;best-practices&quot;&gt;Best Practices&lt;/h1&gt;

&lt;p&gt;What do you do when disaster strikes and you have to restore your site?  Make sure you’re prepared beforehand.&lt;/p&gt;

&lt;p&gt;Yeah, you have partial backups, but take at least one full backup of the site first so that you have all your site’s contents backed up (this is worst case scenario planning).  Then when you’re restoring your backups you can first restore the full backup of the site, and then restore the latest partial backup on top of it.&lt;/p&gt;

&lt;p&gt;Here’s why: it lets you use &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/&quot;&gt;Deployment Slots&lt;/a&gt; to test your restored site. You can even test the restore process without ever touching your production site. And testing your restore process is a &lt;a href=&quot;http://axcient.com/blog/one-thing-can-derail-disaster-recovery-plan/&quot;&gt;Very Good Thing&lt;/a&gt;.  You never know when you might run into some subtle gotcha like I did when I tried restoring my blog and end up losing half your content.&lt;/p&gt;

&lt;h2 id=&quot;my-horror-story&quot;&gt;My horror story&lt;/h2&gt;

&lt;p&gt;My blog is powered by the &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; blogging platform.  Like a responsible dev I created a backup of my site and everything was great. Then one day I got a message saying that there was a new version of Ghost available and I could upgrade my blog to it. Great!&lt;/p&gt;

&lt;p&gt;I created one more backup of my site to backup the latest blog posts, and proceeded to upgrade Ghost.&lt;/p&gt;

&lt;p&gt;On my production site.&lt;/p&gt;

&lt;p&gt;Bad mistake.&lt;/p&gt;

&lt;p&gt;Something went wrong with the upgrade, my home screen just showed a blank screen.  “No problem” I thought, “I’ll simply restore the backup I just took.”&lt;/p&gt;

&lt;p&gt;I restored the upgrade, saw everything come back…except the blog posts.&lt;/p&gt;

&lt;p&gt;WHAT???&lt;/p&gt;

&lt;p&gt;Turns out, in the &lt;a href=&quot;http://support.ghost.org/how-to-upgrade/&quot;&gt;Ghost upgrade notes&lt;/a&gt; there’s this warning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/06/Ghost--upgrade-warning.PNG&quot; alt=&quot;You can take a copy of your database from content/data but you  should not do this while Ghost is runing. Please stop it first&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you try to backup the data while Ghost is running…the data doesn’t actually get backed up.&lt;/p&gt;

&lt;p&gt;Bummer.&lt;/p&gt;

&lt;p&gt;If I had tried the restore on a test slot first I would have seen this issue and not lost all my posts.&lt;/p&gt;

&lt;p&gt;Such is life. It can happen to &lt;a href=&quot;http://blog.codinghorror.com/international-backup-awareness-day/&quot;&gt;the best of us&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2015/06/05/creating-partial-backups-of-your-site-with-azure-web-apps/&quot;&gt;Backup just the Important Parts of your Site with Azure Web Apps&lt;/a&gt; was originally published by Zain Rizvi at &lt;a href=&quot;http://localhost:4000&quot;&gt;Zain Rizvi&lt;/a&gt; on June 05, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>

      
        <hr />
        <div class="social-share">
  <h5>Thanks for reading! If you found this post valuable, please help share it with others</h5>
  <ul>
    <li>
      <a href="https://twitter.com/intent/tweet?text=http://localhost:4000/feed.xml" class="twitter" title="Share on Twitter"><i class="fa fa-twitter"></i><span> Twitter</span></a>
    </li>
    <li>
      <a href="https://www.facebook.com/sharer/sharer.php?u=http://localhost:4000/feed.xml" class="facebook" title="Share on Facebook"><i class="fa fa-facebook"></i><span> Facebook</span></a>
    </li>
    <li>
      <a href="https://plus.google.com/share?url=http://localhost:4000/feed.xml" class="google-plus" title="Share on Google Plus"><i class="fa fa-google-plus"></i><span> Google+</span></a>
    </li>
  </ul>
</div><!-- /.social-share -->
      
    </div><!-- /.article-wrap -->
    
  </article>
</div><!-- /#index -->

<div class="footer-wrap">
  <footer>
    

<span>&copy; 2017 Zain Rizvi. Powered by <a href="http://jekyllrb.com" rel="nofollow">Jekyll</a> using the <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a> theme.</span>

  </footer>
</div><!-- /.footer-wrap -->

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="http://localhost:4000/assets/js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
<script src="http://localhost:4000/assets/js/scripts.min.js"></script>


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-63901701-1', 'auto');
  ga('send', 'pageview');

</script>


</body>
</html>
